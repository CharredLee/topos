
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Topos.Power
import Topos.SubobjectClassifier

namespace CategoryTheory

open Category Limits Classifier Power

universe u v

variable (C : Type u) [Category.{v} C]

class Topos where
  [has_terminal : HasTerminal C]
  [finite_limits : HasPullbacks C]
  [subobject_classifier : HasSubobjectClassifier C]
  [cartesian_closed : HasPowerObjects C]

attribute [instance] Topos.has_terminal Topos.finite_limits Topos.subobject_classifier Topos.cartesian_closed

variable [Topos C] {C}

namespace Topos

noncomputable section

def Predicate.true_ (B : C) : B ‚ü∂ Œ© C := terminal.from B ‚â´ (t C)

/--
  The equality predicate on `B ‚®Ø B`.
-/
def Predicate.eq (B : C) : B ‚®Ø B ‚ü∂ Œ© C := ClassifierOf (diag B)

/--
  The "singleton" map {‚Ä¢}_B : B ‚ü∂ Pow B.
  In Set, this map sends b ‚àà B to the singleton set {b}.
-/
def singleton (B : C) : B ‚ü∂ Pow B := P_transpose (Predicate.eq B)

/-- The singleton map {‚Ä¢}_B : B ‚ü∂ Pow B is a monomorphism. -/
instance singletonMono (B : C) : Mono (singleton B) where
  right_cancellation := sorry -- TODO: fill in proof

def Predicate.isSingleton (B : C) : Pow B ‚ü∂ Œ© C := ClassifierOf (singleton B)

/-- The name ‚åàœÜ‚åâ : ‚ä§_ C ‚ü∂ Pow B of a predicate `œÜ : B ‚ü∂ Œ© C`. -/
def Name {B} (œÜ : B ‚ü∂ Œ© C) : ‚ä§_ C ‚ü∂ Pow B := P_transpose ((prod.rightUnitor B).hom ‚â´ œÜ)

def Predicate.fromName {B} (œÜ' : ‚ä§_ C ‚ü∂ Pow B) := (prod.map (ùüô _) œÜ') ‚â´ in_ B

-- TODO: prove equivalence of the types (B ‚ü∂ Œ© C), (Œ©‚ÇÄ ‚ü∂ Pow B), (T_ C ‚ü∂ Pow B), and (Subobject B).



end
end Topos
end CategoryTheory
